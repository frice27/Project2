section .data
    input_buffer db 255 dup(0)
    num_buffer db 20 dup(0)   ; буфер для збереження числа
    lf_cr db 0Dh, 0Ah, '$'    ; символи нового рядка
    prompt db 'Введіть десяткове число (EOF щоб завершити): ', 0
    max_word dw 32767         ; максимальне 16-бітне число

section .text
    global _start

_start:
    ; Виведення промпта
    mov eax, 4                  ; syscall для write
    mov ebx, 1                  ; stdout
    mov ecx, prompt             ; вказівник на promt
    mov edx, prompt_len         ; довжина промпта
    int 80h                     ; системний виклик

read_loop:
    ; Зчитування введення з stdin
    mov eax, 3                  ; syscall для read
    mov ebx, 0                  ; stdin
    mov ecx, input_buffer       ; вказівник на буфер введення
    mov edx, 255                ; максимальна довжина введення
    int 80h                     ; виклик системного виклику

    ; Перевірка на EOF
    cmp eax, 0                  ; кількість прочитаних байтів
    je exit_program             ; кінець програми при умові якщо 0

    ; Розділення введення на числа та їх обробка
    mov esi, input_buffer      ; вказівник на початок введення
read_number_loop:
    mov edi, num_buffer        ; вказівник на буфер для числа
    call read_number           ; читаємо число

    ; Перевірка, чи число від'ємне
    mov al, byte [esi]
    cmp al, '-'                ; перевірка на від'ємний знак
    jne positive_number        ; якщо не від'ємне, переходимо до наступного числа
    inc esi                    ; пропускаємо мінус

    ; Конвертуємо від'ємне число в доповнювальний код
    call convert_negative

positive_number:
    ; Конвертуємо число в бінарне представлення
    call convert_to_binary

    ; Виведення бінарного представлення числа
    mov eax, 4                  ; syscall для write
    mov ebx, 1                  ; stdout
    mov ecx, num_buffer         ; вказівник на буфер з бінарним представленням
    call print_string           ; виводимо бінарне представлення числа

    ; Виведення нового рядка
    mov eax, 4                  ; syscall для write
    mov ebx, 1                  ; stdout
    mov ecx, lf_cr              ; вказівник на символи нового рядка
    call print_string           ; виводимо новий рядок

    ; Перехід до наступного числа
    inc esi                     ; пропускаємо пробіл або символ нового рядка
    jmp read_number_loop

exit_program:
    ; Завершення програми
    mov eax, 1                  ; syscall для exit
    xor ebx, ebx                ; код завершення 0
    int 80h                     ; виклик системного виклику

read_number:
    ; Читання числа з введення
    movzx ecx, byte [esi]      ; зчитування символу
    cmp ecx, ' '               ; перевірка на пробіл
    je end_of_number           ; якщо пробіл, кінець числа

    cmp ecx, 0Ah               ; перевірка на LF (0x0A)
    je end_of_number           ; якщо LF, кінець числа

    cmp ecx, 0Dh               ; перевірка на CR (0x0D)
    je end_of_number           ; якщо CR, кінець числа

    mov byte [edi], cl         ; копіювання символу в буфер числа
    inc edi                    ; перехід до наступного байта в буфері
    inc esi                    ; перехід до наступного символу в введенні
    jmp read_number            ; повторення процесу для наступного символу

end_of_number:
    mov byte [edi], 0          ; додаємо нуль-термінатор до буфера числа
    ret

convert_to_binary:
    ; Конвертуємо число в бінарне представлення
    mov eax, num_buffer        ; вказівник на буфер з числом
    call atoi                  ; перетворення рядка у ціле число
    mov ebx, eax               ; зберігаємо число у регістрі EBX

    ; Перевірка на переповнення
    cmp ebx, max_word          ; порівняння з максимально можливим значенням
    jle not_overflow           ; якщо число менше або дорівнює максимально можливому, не переповнено

    mov ebx, max_word          ; встановлення максимального значення за модулем
    neg ebx                    ; встановлення від'ємного значення
not_overflow:
    movzx eax, bx              ; розширення до 32 біт
    call itoa                  ; перетворення цілого числа у рядок
