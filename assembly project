section .data
    msg db 'Enter decimal numbers (separated by space or newline, max length 255): $'

section .bss
    buffer resb 256     ; Буфер для збереження введеного рядка
    input resb 20       ; Буфер для перетворення символів на число
    nums resw 10000     ; Масив для збереження чисел
    num_count resw 1    ; Лічильник чисел
    output db 20 dup(0) ; Буфер для виведення результату

section .text
    global _start

_start:
    ; Вивід повідомлення
    mov ah, 09h         ; Функція DOS для виведення рядка
    mov dx, msg         ; Передача адреси рядка
    int 21h             ; Виклик інтерупта DOS

read_loop:
    ; Читання рядка з stdin
    mov ah, 0Ah         ; Функція DOS для читання рядка
    mov dx, buffer      ; Передача адреси буфера
    int 21h             ; Виклик інтерупта DOS

    ; Перевірка на кінець вводу
    cmp byte [buffer], 0Dh  ; Перевірка першого символу на CR
    je end_program

    ; Розділення рядка на числа та їх збереження
    mov si, buffer     ; Передача адреси буфера
    call tokenize_and_store

    ; Повторення
    jmp read_loop

end_program:
    ; Вивід збережених чисел
    mov si, nums       ; Передача адреси масиву
    mov cx, [num_count] ; Передача кількості чисел
    call print_numbers

    ; Вихід
    mov ax, 4C00h      ; Функція DOS для виходу з програми
    int 21h            ; Виклик інтерупта DOS

tokenize_and_store:
    ; Цикл для обробки кожного символу в рядку
    xor bx, bx         ; Лічильник символів в рядку
    xor di, di         ; Вказівник на початок рядка

next_char:
    ; Читання наступного символу
    mov al, byte [si]  ; Завантаження символу в AL
    test al, al        ; Перевірка на кінець рядка
    jz end_of_line

    ; Перевірка на пробіл або символ нового рядка
    cmp al, ' '
    je process_number
    cmp al, 0Ah
    je process_number
    cmp al, 0Dh
    je process_number

    ; Якщо це не пробіл або символ нового рядка, перейти до наступного символу
    inc si
    inc bx
    cmp bx, 255
    jnz next_char
    ret

process_number:
    ; Перевірка наявності числа для обробки
    cmp bx, 0
    je next_char

    ; Копіювання числа в окремий буфер
    mov cx, bx
    mov si, buffer
    mov di, input
    rep movsb

    ; Конвертація рядка у число
    mov si, input
    call string_to_int

    ; Збереження числа в масиві
    mov bx, [num_count]
    mov ax, nums[bx]
    mov [ax], si
    inc word [num_count]

    ; Перехід до наступного символу
    inc si
    xor bx, bx
    jmp next_char

end_of_line:
    ret

print_numbers:
    ; Виведення кожного числа у масиві
    mov di, si         ; Збереження початкової адреси масиву
    mov bx, cx         ; Збереження кількості чисел
print_loop:
    mov si, di         ; Передача адреси поточного числа
    mov ax, [si]
    call print_integer  ; Виведення числа
    add di, 2          ; Перехід до наступного числа
    dec bx             ; Зменшення лічильника
    jnz print_loop     ; Повторення, поки всі числа не будуть виведені
    ret

print_integer:
    ; Конвертація числа у рядок та виведення його
    mov bx, 10         ; Для ділення на 10
    mov di, output     ; Буфер для збереження рядка
    add di, 19         ; Початок з кінця буфера

    ; Перевірка на від'ємне число
    test ax, ax
    jns nonnegative

    ; Додаємо знак мінус до виводу
    mov byte [di], '-'
    inc di
    neg ax            ; Змінюємо знак числа на додатній

nonnegative:
    ; Обробка числа 0 окремо
    cmp ax, 0
    jne nonzero

    mov byte [di], '0'
    inc di
    jmp print_done

nonzero:
    ; Конвертація числа в рядок у зворотньому порядку
reverse_loop:
    xor dx, dx        ; Очистка dx для ділення
    div bx            ; Ділення на 10, результат у ax, остача в dx
    add dl, '0'       ; Конвертація остачі у символ
    dec di
    mov [di], dl      ; Збереження символу в буфері
    test ax, ax       ; Перевірка, чи закінчилося число
    jnz reverse_loop  ; Якщо ні, продовження обробки

print_done:
    ; Виведення рядка
    mov ah, 09h        ; Функція DOS для виведення рядка
    mov dx, di         ; Передача адреси рядка
    int 21h            ; Виклик інтерупта DOS
    ret

string_to_int:
    ; Конвертація рядка у число
    xor ax, ax         ; Очистка ax для збереження результату
    xor cx, cx         ; Очистка cx для збереження знака числа

next_digit:
    mov dl, byte [si]  ; Завантаження наступного символу
    test dl, dl        ; Перевірка на кінець рядка
    jz end_convert
    cmp dl, '-'        ; Перевірка, чи є символ знаком мінус
    je set_negative    ; Якщо так, встановлюємо флаг негативного числа
    sub dl, '0'        ; Конвертація символу у цифру
    mul bx             ; Множення поточного числа на 10
    add ax, dx         ; Додавання цифри до результату
    inc si             ; Перехід до наступного символу
    jmp next_digit

set_negative:
    inc si             ; Пропускаємо символ мінуса
    mov cx, 1          ; Встановлюємо флаг негативного числа
    jmp next_digit

end_convert:
    test cx, cx        ; Перевірка на від'ємне число
    jnz make_negative  ; Якщо так, змінюємо знак числа на від'ємний
    ret

make_negative:
    neg ax             ; Змінюємо знак числа на від'ємний
    ret
