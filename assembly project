.model small
.stack 10000d
.386
.data
    oneChar db ?, '$'
    numbers dw 20000 Dup(?)
    minusChar dd ?
    lengthArr dw ?
    innerLooCn dw ?
    outerLoopCnt dw ?
    
    
.code
start:
mov ax, @data
mov ds, ax
call readNumbers
call println

mov, ax 4C00h
int 21h

 readNumbers PROC
        xor di, di
        xor si, si
        mov numbers[0], 0
        mov minusChar, '+'
read next:
   mov ah, 3Fh
            mov bx, 0h 
            mov cx, 1  
            mov dx, offset oneChar  
            int 21h   

            or ax, ax
            je stop

            cmp oneChar, ' '
            jz putNum

          cmp oneChar, 13
          je putNum
cmp oneChar, 10
            je putNum

            cmp oneChar, '-'
            je charIsMinus

            cmp oneChar, '0'
            jb next

            cmp oneChar, '9'
            ja next

            jmp converChar

            charIsMinus:
                mov minusChar, '-'
                jmp read_next
            
            converChar:
mov ax, numbers[di]

                mov cl, oneChar
                
                sub cl, '0'
                mov bx, 10
                mul bx
                jo ifOverFlow
                add ax, cx
                jo ifOverFlow

                cmp ax, 32767
                ja ifOverFlow

            next:
                mov si, '1'
                mov numbers[di], ax
                jmp read_next
                
            putNum:
                cmp si, '1'
                jnz jump

                cmp minusChar, '-'
                jne nextNum

                cmp numbers[di], 32767
                je minusMax
                jmp negMinusEv

                minusMax:
                    neg numbers[di]
                    sub numbers[di], 1
                    jmp nextNum

                negMinusEv:
                    neg numbers[di]

                nextNum:
                    mov minusChar, '+'
                    add di, 2
                    mov numbers[di], 0

                jump:
                    mov si, '0'
                    jmp read_next

            ifOverFlow:
                mov numbers[di], 32767
                jo read_next

        stop:
            cmp si, '1' 
            jnz getSizeArr
            
            add di, 2

            getSizeArr:
                shr di, 1
                mov lengthArr, di

        ret
    readNumbers ENDP

SearchAvarage proc
        xor di, di
        xor eax, eax
        xor ebx, ebx
        mov si, word ptr lengthArr

        addNumbers:
            mov bx, numbers[di]
    cmp bx, 0
            jl negati

            add eax, ebx
            jmp mainCount

            negati:
                neg bx
                sub eax, ebx

            mainCount:
                add di, 2
                dec si
                cmp si, 0
                ja addNumbers
           divOnSize:
            cmp eax, 0
            jl negat
            jmp elses

            negat:
                neg eax
                
                xor edx, edx
                xor ecx, ecx
                mov cx, lengthArr
                div ecx

                neg eax

            call outputNum
            ret

            elses:
                xor edx, edx
                xor ecx, ecx
                mov cx, lengthArr
                div ecx

            write:
                call outputNum

            ret
    SearchAvarage ENDP

 println PROC
        mov ah, 02h
        mov dl, 10
        int 21h

        xor ax, ax
        xor dx, dx

        ret
    println ENDP


drawSpace PROC
        mov ah, 02h
        mov dl, 0dh
        int 21h

        ret
    drawSpace ENDP
